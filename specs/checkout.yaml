openapi: 3.0.0
info:
  title: Checkout
  version: '1.0'
  description: "The api for Beyond's Checkout."
  contact:
    name: Checkout Team
    url: 'https://getbeyond.com/contact-us'
    email: CheckoutProductTeam@getbeyond.com
  license:
    name: 'Proprietary'
servers:
  - url: 'https://checkout.getbeyond.com/api/v1/{tenantId}'
    description: Checkout API
    variables:
      'tenantId':
        default: '00000000-0000-0000-0000-000000000000'
paths:
  /Info:
    get:
      summary: Get Tenant info
      tags:
        - Merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: No Tenant Found
      operationId: get-Info
      description: Get basic tenant information
    post:
      summary: Create a new tenant
      operationId: post-Info
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Create a new tenant record
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        description: 'The tenant to be created, do not include an ID it will be auto generated by API'
      tags:
        - Merchant
    put:
      summary: Update an existing tenant
      operationId: put-Info
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Update a tenant record
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      security:
        - API Key: []
      tags:
        - Merchant
    delete:
      summary: Delete a tenant
      operationId: delete-Info
      responses:
        '202':
          description: Accepted
        '404':
          description: Not Found
      security:
        - API Key: []
      description: Delete a tenant.
      tags:
        - Merchant
    parameters: []
  /Configuration:
    get:
      summary: Get Tenant Configuration
      tags:
        - Merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantConfiguration'
        '404':
          description: Not Found
      operationId: get-Configuration
      description: Get the tenant configuration
    post:
      summary: Create new tenant config
      operationId: post-Configuration
      responses:
        '200':
          description: OK
        '406':
          description: Not Acceptable
      security:
        - API Key: []
      description: Creates a configuration record if none exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantConfiguration'
      tags:
        - Merchant
    put:
      summary: "Update tenant's config"
      operationId: put-Configuration
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantConfiguration'
        description: ''
      security:
        - API Key: []
      description: "Update tenant's configuration"
      tags:
        - Merchant
  /Products:
    get:
      summary: Get Products
      tags:
        - Product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      operationId: get-Products
      description: Get products available for a tenant
    post:
      summary: Add a Product
      operationId: post-Products
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      description: Add a new product to the tenant
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
      tags:
        - Product
  '/Products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
    get:
      summary: Get a specific Product
      tags:
        - Product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: get-Products-productId
      description: Get a specific product by its id...
    put:
      summary: Update a specific Product
      operationId: put-Products-productId
      responses:
        '201':
          description: Created
        '404':
          description: Not Found
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      description: Update a product by id.
      tags:
        - Product
    delete:
      summary: Remove a Product
      operationId: delete-Products-productId
      responses:
        '204':
          description: No Content
      description: Delete a product
      security:
        - API Key: []
      tags:
        - Product
  /Categories:
    get:
      summary: Get Product catagories
      tags:
        - Product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      operationId: get-Categories
      description: Get categories for tenant
    post:
      summary: Create a new Category
      operationId: post-Categories
      responses:
        '201':
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        description: ''
      security:
        - API Key: []
      description: Create a new category for the tenant
      tags:
        - Product
  '/Categories/{categoryId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    get:
      summary: Get Category by Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Not Found
      operationId: get-Categories-categoryId
      description: Get a specific category by id
      tags:
        - Product
    put:
      summary: Update Category
      operationId: put-Categories-categoryId
      responses:
        '200':
          description: OK
      description: Update a product category relationship record
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      tags:
        - Product
    delete:
      summary: Delete Category
      operationId: delete-Categories-categoryId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: Delete a specific Category
      tags:
        - Product
  '/Categories/{categoryId}/Products':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    get:
      summary: Get Products in a Category
      tags:
        - Product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      operationId: getProductsByCategory
      description: Get all products under a category for specified tenant
  /Users:
    get:
      summary: Get Users
      tags:
        - Merchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantUser'
      operationId: get-Users
      description: Get users associated with tenant
  /Orders:
    get:
      summary: Get Orders
      tags:
        - Order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      operationId: get-Orders
      description: Get all orders for tenant
      parameters:
        - schema:
            type: integer
            format: int32
            default: 100
          in: query
          name: limit
          description: number or orders to be returned.
        - schema:
            type: integer
            format: int32
            default: 0
          in: query
          name: offset
          description: number of records to skip from top
    post:
      summary: Create a new Order
      operationId: post-Orders
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      description: Create a new order (Validates CAPTCHA or XSRF token)
      tags:
        - Order
  '/Orders/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get Order by Id
      tags:
        - Order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: get-Orders-orderId
      description: Get Order information by id
    put:
      summary: Update Order
      operationId: put-Orders-orderId
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      description: Update an order by id
      tags:
        - Order
  '/Orders/{orderId}/Items':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: "Get Order's Items"
      tags:
        - Order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderLineItem'
      operationId: get-Orders-orderId-Items
      description: Get the items in order
    post:
      summary: Add a LineItem to Order
      operationId: post-Orders-orderId-Items
      responses:
        '201':
          description: Created
      description: Add a lineitem to order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderLineItem'
      tags:
        - Order
  '/Orders/{orderId}/Items/{itemId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
      - schema:
          type: string
        name: itemId
        in: path
        required: true
    get:
      summary: Get LineItems of an Order
      tags:
        - Order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderLineItem'
      operationId: get-Orders-orderId-Items-itemId
      description: Get an order line item by id.
    put:
      summary: Update a LineItem in Order
      operationId: put-Orders-orderId-Items-itemId
      responses:
        '201':
          description: Created
        '403':
          description: Forbidden - Order cannot be modified
      description: Update an order line item
      tags:
        - Order
    delete:
      summary: Remove a LineItem from order
      operationId: delete-Orders-orderId-Items-itemId
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden - Order cannot be modified
      description: Delete a line item from the order
      tags:
        - Order
  /Catalogs:
    get:
      summary: Get Menus/Catalogs
      tags:
        - Menu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Catalog'
      operationId: get-Catalogs
      description: Get catalogs(aka menus) for a tenant
    post:
      summary: Create a new Menu/Catalog
      operationId: post-Catalogs
      responses:
        '201':
          description: Created
      description: Create a new catalog for tenant.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
        description: ''
      tags:
        - Menu
  '/Orders/{orderId}/FulfillmentInfo':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get Order Fulfillment info
      tags:
        - Order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFulfillmentInfo'
        '404':
          description: Not Found
      operationId: get-Orders-orderId-FulfillmentInfo
      description: Get fulfillment information for an order
    post:
      summary: Add/Update Order Fulfillment info
      operationId: post-Orders-orderId-FulfillmentInfo
      responses:
        '201':
          description: Created
        '204':
          description: No Content
        '403':
          description: Forbidden - Order cannot be modified
        '404':
          description: Not Found
      description: Create or update fulfillment information for a specific order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFulfillmentInfo'
      tags:
        - Order
  '/Catalogs/{catalogId}/Products':
    parameters:
      - schema:
          type: string
        name: catalogId
        in: path
        required: true
    get:
      summary: Get Products from Menu/Catalog
      tags:
        - Menu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      operationId: get-Catalogs-catalogId-Products
      description: Get products from a specific catalog
  '/Catalogs/{catalogId}/Products/{productId}':
    parameters:
      - schema:
          type: string
        name: catalogId
        in: path
        required: true
      - schema:
          type: string
        name: productId
        in: path
        required: true
    delete:
      summary: Remove a product from Menu/Catalog
      operationId: delete-Catalogs-catalogId-Products-productId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: Remove a product from catalog
      tags:
        - Menu
    post:
      summary: Add a product to Menu/Catalog
      operationId: post-Catalogs-catalogId-Products-productId
      responses:
        '200':
          description: OK
      description: Add a product to a catalog/menu.
      tags:
        - Menu
  '/Categories/{categoryId}/Products/{productId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
      - schema:
          type: string
        name: productId
        in: path
        required: true
    post:
      summary: Add a Product to Category
      operationId: post-Categories-categoryId-Products-productId
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
      description: Add a product to a category
      security:
        - API Key: []
      tags:
        - Product
    delete:
      summary: Remove a Product from Category
      operationId: delete-Categories-categoryId-Products-productId
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: Remove a product from a category
      security:
        - API Key: []
      tags:
        - Product
components:
  schemas:
    Tenant:
      title: Tenant
      type: object
      properties:
        id:
          type: string
          format: uuid
          default: 392F13B6-2707-4E8B-A31A-FE5D94DC519D
        name:
          type: string
        tagLine:
          type: string
        tenantTypeId:
          type: integer
        startDate:
          type: string
          format: date
        terminationDate:
          type: string
          format: date
    TenantUser:
      type: object
      title: User
      x-examples:
        example-1: {}
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        userName:
          type: string
        passwordHash:
          type: string
          format: password
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        isPrimaryContact:
          type: boolean
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        roleId:
          type: integer
        accessFailedCount:
          type: integer
        concurrencyStamp:
          type: string
        emailConfirmed:
          type: boolean
        isLockedOut:
          type: boolean
        phoneNumber:
          type: string
        phoneNumberVerified:
          type: boolean
        multiFactorEnabled:
          type: boolean
      required:
        - id
        - tenantId
        - userName
        - firstName
        - lastName
        - email
        - isPrimaryContact
        - startDate
        - endDate
    TenantConfiguration:
      title: TenantConfiguration
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantCode:
          type: string
        activeMenuId:
          type: integer
        paymentGatewayPrivateKey:
          type: string
        notificationEmailTemplate:
          type: string
        notificationTextTemplate:
          type: string
        contactEmail:
          type: string
        contactPhoneNumber:
          type: string
        receiptHeader:
          type: string
        receiptFooter:
          type: string
        returnPolicy:
          type: string
        shippingPolicyUrl:
          type: string
        privacyPolicyUrl:
          type: string
        securityPolicyUrl:
          type: string
        logoImageUrl:
          type: string
        bannerMessage:
          type: string
        showTipOnCheckout:
          type: boolean
        headerDisplayName:
          type: string
      required:
        - id
        - tenantId
        - notificationEmailTemplate
        - notificationTextTemplate
        - contactEmail
        - contactPhoneNumber
        - headerDisplayName
      description: Configuration information for the tenant
    Category:
      title: Category
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        sortOrder:
          type: integer
        isActive:
          type: boolean
          default: 'false'
      required:
        - tenantId
    Product:
      title: Product
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
          default: 1
          example: 12.95
        isTaxable:
          type: boolean
          default: 'true'
        taxId:
          type: integer
          default: 1
        sku:
          type: string
        isActive:
          type: boolean
          default: 'false'
        imageUrl:
          type: string
          format: uri
        trackInventory:
          type: boolean
          default: 'false'
        inventoryOnHand:
          type: integer
      required:
        - tenantId
        - name
        - description
        - price
        - isTaxable
        - isActive
      description: "Entitiy representing a product that is sold at Tenant's location..."
    Catalog:
      title: Catalog
      type: object
      description: aka Menu in restaurant setting.
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
      required:
        - tenantId
        - name
        - description
    Order:
      title: Order
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
        customerId:
          type: string
        orderTotalAmount:
          type: string
        fulfillmentTypeId:
          type: string
        orderTipAmount:
          type: string
        orderDeliveryChargeAmount:
          type: string
        taxId:
          type: string
    OrderLineItem:
      title: OrderLineItem
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        quantity:
          type: string
        discountPercent:
          type: number
          maximum: 100
          exclusiveMaximum: false
        discountAmount:
          type: number
        lineItemTotal:
          type: number
        taxAmount:
          type: number
        lineItemTotalAmount:
          type: number
        orderId:
          type: string
          format: uuid
      required:
        - productId
        - quantity
        - orderId
    OrderFulfillmentInfo:
      title: OrderFulfillmentInfo
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        fulfillmentTypeId:
          type: string
          enum:
            - pickup
            - delivery
            - shipping
          default: pickup
        pickupVehicleMake:
          type: string
        pickupVehicleModel:
          type: string
        pickupVehicleColor:
          type: string
        deliveryAddressLine1:
          type: string
        deliveryAddressLine2:
          type: string
        deliveryCity:
          type: string
        deliveryState:
          type: string
        deliveryZip:
          type: string
          pattern: "(^\\d{5}$)|(^\\d{5}-\\d{4}$)"
          maxLength: 10
        deliveryCountry:
          type: string
          default: US
  securitySchemes:
    API-Key:
      name: X-API-KEY
      type: apiKey
      in: header
      description: "API Key to be used by Beyond One for getting/updating tenant's information"
tags:
  - name: Product
    description: "Actions/Operations that can be performed on a tenant's Products."
  - name: Merchant
    description: Actions/Operations that can be performed at a tenant level.
  - name: Order
    description: "Actions/Operations that can be performed on a tenant's Orders."
  - name: Menu
    description: "Actions/Operations that can be performed on a tenant's Catalog/Menu."
